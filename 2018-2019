
import zmq
import time
import socket
import threading
'''
def broadcast(Host,port):
    sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    msg='hello'
    sock.setsockopt(socket.SOL_SOCKET,socket.SO_BROADCAST,1)
    sock.sendto(msg.encode(),(Host,port))

if __name__=="__main__":
    t1=threading.Thread(target=broadcast,name='broad_send',args=("192.168.1.255",9533))
    t1.start()
'''
import os
import re
def get_bd_address(ether_adapter):
    ip_data = os.popen("ifconfig " + ether_adapter)
    for line in ip_data:
        match2 = re.search(r'Bcast:+(\d+.\d+.\d+.\d+)', line)
        if match2:
            bcast = match2.group(1)
            return bcast

def get_ip_data(ether_adapter):
    ip_data = os.popen("ifconfig " + ether_adapter)
    for line in ip_data:
        match2 = re.search(r'inet addr:+(\d+.\d+.\d+.\d+)', line)
        if match2:
            ip_ = match2.group(1)
            return ip_

def broadcast(Host,port):
    #broadcast_send
    sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    msg='hello'
    sock.setsockopt(socket.SOL_SOCKET,socket.SO_BROADCAST,1)
    sock.sendto(msg.encode(),(Host,port))

def reply_for_req(host,port):
    #Sending req to the response
    context = zmq.Context()
    socket = context.socket(zmq.REP)
    socket.bind("tcp://" "%s:%d" % ((host),port))
    #  Wait for next request from other controller
    message= socket.recv(1024)
    a=message.decode()
    print (a)
    #b=client
    #print (b)
    #  Do some 'work'
    #  Send reply back to client
    socket.send_string("join the database cluster")

if __name__=="__main__":
    ethernet_card = "wlp3s0"
    bd_of_the_machine = get_bd_address(ethernet_card)
    ip_of_the_machine = get_ip_data(ethernet_card)
    t1=threading.Thread(target=broadcast,name="broad_send",args=(bd_of_the_machine,9533))
    t2=threading.Thread(target=reply_for_req,name="Reply_for_req",args=(ip_of_the_machine,3233))
    t1.start()
    t2.start()
