import zmq
import time
import socket
import threading
import subprocess
from subprocess import Popen
import os
import re
from threading import Thread
import json
import pyangbind
import napalm
import orc_to_wireless
#this program contains the sending bd and recv bd and req for sending json to wireless sdn

def bd_recv():
    #listening bd for other devices and controllers
    sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    host="146.175.215.255"
    port=8766
    address=host,port
    sock.bind(address)
    msg,client=sock.recvfrom(4089)
    a=msg.decode()
    b=client[0]
    return b
class ThreadWithReturnValue(Thread):
    #returning the value from any function
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs={}, Verbose=None):
        Thread.__init__(self, group, target, name, args, kwargs)
        self._return = None
    def run(self):
        print(type(self._target))
        if self._target is not None:
            self._return = self._target(*self._args,
                                                **self._kwargs)
    def join(self, *args):
        Thread.join(self, *args)
        return self._return
def send_req(host,port):
    context=zmq.Context()
    socket=context.socket(zmq.REQ)
    socket.connect("tcp://" "%s:%d" % ((host),port))
    print("sending req")
    sw=orc_to_wireless.orc_to_wireless()
    packet=(json.dumps(sw.get(),indent=4))
    socket.send_string(packet)
    msg=socket.recv(1024)
    print("received reply: %s" %msg)

if __name__=='__main__':
    twrv = ThreadWithReturnValue(target=bd_recv)
    twrv.start()
    h = (twrv.join())
    t2=threading.Thread(target=send_req,name="send_req",args=(h,9843))
    t2.start()
