import threading
import time
import socket
import logging
import os
import re
import pymongo
import json
#controller1
# this is the best program so far
#put condition for controller msg and client msg
#controller to test mac laptop
def get_bd_address(ether_adapter):
    ip_data = os.popen("ifconfig " + ether_adapter)
    for line in ip_data:
        match2 = re.search(r'broadcast\s+(\d+.\d+.\d+.\d+)', line)
        if match2:
            bcast = match2.group(1)
            return bcast

def get_ip_data(ether_adapter):
    ip_data = os.popen("ifconfig " + ether_adapter)
    for line in ip_data:
        match2 = re.search(r'inet\s+(\d+.\d+.\d+.\d+)', line)
        if match2:
            ip_ = match2.group(1)

            return ip_

def broadcast(Host,port):
    #send bd
    sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    msg=get_ip_data("wlp1s0")
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    sock.sendto(msg.encode(), (Host,port))
'''    
def recv():
    sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    host="192.168.1.46"
    port=5555
    address=host,port
    sock.bind(address)
    while True:
        msg,b=sock.recvfrom(1024)
        print(msg.decode())
'''
def broadcast_recv():
    #listen bd
    sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    sock.bind((get_bd_address("wlp1s0"),9289))
    # receive broadcast
    msg, client = sock.recvfrom(1024)
    a=(msg.decode())
    host=a
    #other controller port
    port=4242
    address=(host,port)
    payload={'controller':'hey this is controller and my ip is 192.168.1.46 '}
    json_data=json.dumps(payload)
    print("sending".format(**payload))
    sock.sendto(json_data.encode(),address)
    print("sent my hello to other controller",json_data)

def parserr(payload):
    uri = "mongodb://localhost:27017"
    client = pymongo.MongoClient(uri)
    db = client['namedb']
    collection = db['orc']
    collection.insert(payload)
    testData = collection.find({})
    for test in testData:
        print(test)


def talkToClient(ip):
    logging.info("sending 'clients we received your data' to %s",ip )
    sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    sock.sendto("ok".encode('utf-8'), ip)

def listen_clients(Host,port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((Host,port))
    client_list=[]
    #listen to multiple clients
    while True:
        msgg, client = sock.recvfrom(1024)
        json_data = b""
        json_data += msgg
        payload = json.loads(json_data.decode())
        print(payload)
        print("msg".format(**payload))
        print('connected with : ' + client[0]+ ':' + str(client[1]))
        t4 = threading.Thread(target=parserr, args=(payload,))
        t4.start()
        t = threading.Thread(target=talkToClient, args=(client,))
        t.start()


if __name__=="__main__":
    ethernet_card = "wlp1s0"
    bd_of_the_machine = get_bd_address(ethernet_card)
    ip_of_the_machine = get_ip_data(ethernet_card)
    t1 = threading.Thread(target=broadcast, name='broad_send', args=(bd_of_the_machine, 12345))
    t2 = threading.Thread(target=broadcast_recv,name='recv bd')
    #t5=threading.Thread(target=recv,name= "recv ok",args="",)
    t3 = threading.Thread(target=listen_clients,name='listening client',args=(ip_of_the_machine,8976))
    t1.start()
    #t5.start()
    t2.start()
    t3.start()
    t2.join()
    #t5.join()
